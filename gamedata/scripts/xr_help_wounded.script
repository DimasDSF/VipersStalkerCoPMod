----------------------------------------------------------------------------------------------------------------------
--'	Схема помощи раненым
--'	автор: Диденко Руслан (Stohe)
--'	TODO:
----------------------------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------------------------
-- EVALUATORS
----------------------------------------------------------------------------------------------------------------------
class "evaluator_wounded_exist" (property_evaluator)
function evaluator_wounded_exist:__init(name, storage, npc) super (nil, name)
	self.a = storage
	self.a.dtimer = 0
end
function evaluator_wounded_exist:evaluate()
	local npc = self.object
	if not npc:alive() or (npc:best_enemy() and not xr_wounded.is_wounded(npc:best_enemy())) or npc:character_community() == "zombied" or self.a.help_wounded_enabled == false or xr_wounded.is_wounded(npc) or npc:section() == "actor_visual_stalker" then
		self.a.active = nil
		return false
	end
	local npc_id = npc:id()
	if self.a.active and self.a.selected_id then
		local patient = db.storage[self.a.selected_id] and db.storage[self.a.selected_id].object
		if patient and xr_wounded.is_wounded(patient) and (db.storage[self.a.selected_id].wounded_already_selected == nil or db.storage[self.a.selected_id].wounded_already_selected == npc_id) then
			if patient:position():distance_to_sqr(self.a.vertex_position) > 20 then
				self.a.active = nil
				return false
			end
			return true
		else
			self.a.active = nil
			return false
		end
	end
	local tg = time_global()
	if self.a.dtimer > tg then
		return false
	end
	self.a.dtimer = tg+math.random(2000,3000)
	local nearest_dist = 900 -- Будет выбирать только трупы, ближе чем эта дистанция (проверяется по квадрату расстояния)
	local nearest_vertex
	local nearest_position
	local selected_id
	local npc_position = npc:position()
	for v in npc:memory_sound_objects() do
		local vo = v:object()
		if vo:alive() and xr_wounded.is_wounded(vo) and npc:relation(vo) ~= game_object.enemy then
			local id = vo:id()
			if db.storage[id].wounded_already_selected == nil and db.storage[id].wounded.not_for_help ~= true then
				local vo_position = vo:position()
				local dist = npc_position:distance_to_sqr(vo_position)
				if npc:relation(vo) == game_object.friend then
					dist = dist/2
				end
				if dist < nearest_dist then
					local vertex = vo:level_vertex_id() --level.vertex_id(vo_position)
					if npc:accessible(vertex) and level.vertex_position(vertex):distance_to_sqr(vo_position) <= 20 then
						nearest_dist = dist
						nearest_vertex = vertex
						nearest_position = level.vertex_position(vertex)
						selected_id = id
					end
				end
			end
		end
	end
	if nearest_vertex ~= nil then
		self.a.vertex_id = nearest_vertex
		self.a.vertex_position = nearest_position
		self.a.selected_id = selected_id
		self.a.active = true
		return true
	end
	return false
end


----------------------------------------------------------------------------------------------------------------------
--Actions
----------------------------------------------------------------------------------------------------------------------
class "action_help_wounded" (action_base)
function action_help_wounded:__init (npc_name,action_name, storage) super (nil, action_name)
	self.a = storage
end
function action_help_wounded:initialize()
	action_base.initialize(self)
	local npc = self.object
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:set_path_type(game_object.level_path)
	npc:set_dest_level_vertex_id(self.a.vertex_id)
	local danger = npc:best_enemy() or xr_danger.is_danger(npc)
	if danger then
		state_mgr.set_state(npc,"rush")
	else
		local patient = db.storage[self.a.selected_id] and db.storage[self.a.selected_id].object
		if (patient and npc:relation(patient) == game_object.friend) or npc:position():distance_to(self.a.vertex_position) > 15 then
			state_mgr.set_state(npc,"run")
		else
			state_mgr.set_state(npc,"walk")
		end
	end
	db.storage[self.a.selected_id].wounded_already_selected = npc:id()
	self.timer = time_global()+60000
end
function action_help_wounded:execute()
	action_base.execute(self)
	local npc = self.object
	if self.timer < time_global() then
		help_wounded(npc) -- fix
		return
	end
	if npc:position():distance_to(self.a.vertex_position) < 1.2 then
		if not self.sound then
			xr_sound.set_sound_play(npc:id(),"wounded_medkit")
			self.timer = time_global()+9000
			self.sound = true
		end
		local look_pos = self.a.vertex_position
		local patient = db.storage[self.a.selected_id] and db.storage[self.a.selected_id].object
		if patient then
			look_pos = patient:bone_position("bip01_spine")
		end
		state_mgr.set_state(npc,"help_wounded",nil,nil,{look_position = look_pos})
	else
		if state_mgr.get_state(npc) == "help_wounded" then
			state_mgr.set_state(self.object,"rush",nil,nil,nil,{fast_set = true})
		end
--		npc:set_dest_level_vertex_id(self.a.vertex_id)
	end
end
function action_help_wounded:finalize()
	action_base.finalize(self)
	if db.storage[self.a.selected_id] then
		db.storage[self.a.selected_id].wounded_already_selected = nil
	end
	self.a.selected_id = nil
	self.a.active = nil
	self.sound = nil
	state_mgr.set_state(self.object,"idle",nil,nil,nil,{fast_set = true})
end

function help_wounded(npc)
	local id = npc:id()
	db.storage[id].help_wounded.active = nil
	db.storage[id].help_wounded.dtimer = time_global()+2000
	local selected_id = db.storage[id].help_wounded.selected_id
	local selected_npc = db.storage[selected_id] and db.storage[selected_id].object
	if not (selected_npc and selected_npc:alive()) then
		return
	end
	alife():create("medkit_script",selected_npc:position(),selected_npc:level_vertex_id(),selected_npc:game_vertex_id(),selected_id)
	xr_wounded.unlock_medkit(selected_npc)
	npc:set_character_rank(npc:character_rank()+2)
end

----------------------------------------------------------------------------------------------------------------------
-- BINDER
----------------------------------------------------------------------------------------------------------------------
function add_to_binder(npc, char_ini, scheme, section, st)
	local operators	= {}
	local properties  = {}


	properties["wounded_exist"]				= xr_evaluators_id.wounded_exist
	properties["wounded"]					= xr_evaluators_id.sidor_wounded_base

	operators["help_wounded"]				= xr_actions_id.wounded_exist
	operators["state_mgr_idle_combat"]	= xr_actions_id.state_mgr + 1
	operators["state_mgr_to_idle_alife"]	= xr_actions_id.state_mgr + 2

	local manager = npc:motivation_action_manager()


	-- Evaluators
	manager:add_evaluator (properties["wounded_exist"], 		evaluator_wounded_exist("wounded_exist", st))

	-- Actions
	local action = action_help_wounded (npc:name(),"action_help_wounded", st)
	action:add_precondition		(world_property(stalker_ids.property_alive, true))
--	action:add_precondition		(world_property(stalker_ids.property_enemy,	false))
--	action:add_precondition		(world_property(stalker_ids.property_danger,false))
	action:add_precondition		(world_property(stalker_ids.property_anomaly,false))
	action:add_precondition		(world_property(properties["wounded_exist"],	true))
	action:add_precondition		(world_property(properties["wounded"], 		false))
	action:add_effect (world_property(properties["wounded_exist"], 			false))
	manager:add_action (operators["help_wounded"], action)

	action = manager:action (xr_actions_id.alife)
	action:add_precondition		(world_property(properties["wounded_exist"],		false))
	
	action = manager:action (operators["state_mgr_idle_combat"])
	action:add_precondition		(world_property(properties["wounded_exist"],		false))

	action = manager:action (operators["state_mgr_to_idle_alife"])
	action:add_precondition		(world_property(properties["wounded_exist"],		false))
	
	action = manager:action (stalker_ids.action_danger_planner)
	action:add_precondition		(world_property(properties["wounded_exist"],		false))
end

function set_help_wounded(npc, ini, scheme, section)
	local st = xr_logic.assign_storage_and_bind(npc, ini, scheme, section)
end


function reset_help_wounded(npc, scheme, st, section)
	st.help_wounded.help_wounded_enabled = utils.cfg_get_bool(st.ini, section, "help_wounded_enabled", npc, false, true)
end


function is_under_help_wounded(npc)
	local mgr = npc:motivation_action_manager()

	if not mgr:initialized() then
		return false
	end

	local current_action_id = mgr:current_action_id()
	return  current_action_id == xr_actions_id.wounded_exist
end