---- Rulix aka Bak --- 8.3.2010

function printf(s, ...)
--	rx_ai.printf("kn:"..s,...)
--	get_console():execute("flush")
end

local kn_ini = ini_file("misc\\rx_knife.ltx")
local knife_sets = {forbiddens = {weapons = {},factions = {},npcs = {}},
				communities = {},
				ranks = {},
				check_prd = rx_utils.read_from_ini(kn_ini,"main","check_period",1001),
				fire_dist = rx_utils.read_from_ini(kn_ini,"main","fire_dist",1.5),
				enabled = rx_utils.read_from_ini(kn_ini,"main","enabled",false,0)}

function init()
	if not knife_sets.enabled then
		kn_ini = nil
		return
	end
	local ranks = rx_utils.get_rank_list()
	for k,v in ipairs(ranks) do
		if kn_ini:section_exist(v) then
			knife_sets.ranks[v] = {rate = rx_utils.read_from_ini(kn_ini,v,"rate",1)}
		end
	end
	local communities = rx_utils.get_communities_list()
	for k,v in ipairs(communities) do
		if kn_ini:section_exist(v) then
			knife_sets.communities[v] = {rate_add = rx_utils.read_from_ini(kn_ini,v,"rate_add",0),
										courage = rx_utils.read_from_ini(kn_ini,v,"courage",1),
										attack_wounded = rx_utils.read_from_ini(kn_ini,v,"attack_wounded",0),
										mutant_hunt = rx_utils.read_from_ini(kn_ini,v,"mutant_hunt",true,0) or nil}
		end
	end
	knife_sets.forbiddens.weapons = rx_utils.parse_list(kn_ini,"main","forbidden_weapons",true)
	knife_sets.forbiddens.factions = rx_utils.parse_list(kn_ini,"main","forbidden_factions",true)
	knife_sets.forbiddens.npcs = rx_utils.parse_list(kn_ini,"main","forbidden_npcs",true)
	kn_ini = nil
	knife_sets.inited = true
end

local kill_wounded = 0
local sneak_attack = 1
local close_attack = 2
local mutant_hunt = 3
local mutant_defend = 4

local mutant_hunt_clsids = {
	[clsid.bloodsucker_s] = true,
	[clsid.boar_s] = true,
--	[clsid.dog_s] = true,
	[clsid.flesh_s] = true,
--	[clsid.pseudodog_s] = true,
--	[clsid.burer_s] = true,
--	[clsid.cat_s] = true,
--	[clsid.chimera_s] = true,
	[clsid.controller_s] = true,
--	[clsid.fracture_s] = true,
--	[clsid.poltergeist_s] = true,
--	[clsid.gigant_s] = true,
--	[clsid.zombie_s] = true,
--	[clsid.snork_s] = true,
--	[clsid.tushkano_s] = true,
	[clsid.psy_dog_s] = true,
--	[clsid.psy_dog_phantom_s] = true}
}
local mutant_defend_clsids = {
--	[clsid.bloodsucker_s] = true,
	[clsid.boar_s] = true,
--	[clsid.dog_s] = true,
	[clsid.flesh_s] = true,
	[clsid.pseudodog_s] = true,
--	[clsid.burer_s] = true,
	[clsid.cat_s] = true,
--	[clsid.chimera_s] = true,
--	[clsid.controller_s] = true,
	[clsid.fracture_s] = true,
--	[clsid.poltergeist_s] = true,
--	[clsid.gigant_s] = true,
--	[clsid.zombie_s] = true,
--	[clsid.snork_s] = true,
	[clsid.tushkano_s] = true,
	[clsid.psy_dog_s] = true,
--	[clsid.psy_dog_phantom_s] = true}
}

targets = {}

local function remove_target(npc_id,st)
	if st.target and targets[st.target] == npc_id then
		targets[st.target] = nil
	end
	st.target = nil
end

class "evaluator_knife_attack" (property_evaluator)
function evaluator_knife_attack:__init(npc,name,storage) super (nil,name)
	self.st = storage
	self.st.delay = 0
	self.st.timer = 0
	self.check_timer = 0
	self.attack_wounded = rx_ai.get_var(npc,"kn_aw")
	local comm = npc:character_community()
	if self.attack_wounded == nil then
		self.attack_wounded = math.random() < knife_sets.communities[comm].attack_wounded
		rx_ai.save_var(npc,"kn_aw",self.attack_wounded)
	end
	self.courage = rx_ai.get_var(npc,"courage")
	if not self.courage then
		self.courage = math.random(25,npc:character_rank()/4+51)
		rx_ai.save_var(npc,"courage",self.courage)
	else -- test
--		self.courage = self.courage*2
	end
	self.courage = self.courage*knife_sets.communities[comm].courage
	self.cmhunt = knife_sets.communities[comm].mutant_hunt
--	rx_ai.printf("knife_init[%s]:kn_aw %s, courage %s, rank %s",npc:character_name(),tostring(self.attack_wounded),self.courage,npc:character_rank())
	rx_ai.subscribe_for_events(npc,self)
end

function evaluator_knife_attack:evaluate()
	local npc = self.object
	if rx_utils.IsTrader(npc) then
		return false
	end
	local wm = rx_wmgr and rx_wmgr.get_wm(npc)
	local knife = wm and wm:get_best_weapon(1) or npc:object("wpn_knife")
	if not knife or npc:animation_count() ~= 0 then
--		printf("evaluator_knife_attack[%s]:not knife or anims",npc:character_name())
		remove_target(npc_id,self.st)
		return false
	end
	local npc_id,tg = npc:id(),time_global()
	if self.st.delay > tg then
		remove_target(npc_id,self.st)
--		printf("evaluator_knife_attack[%s]:delay",npc:character_name())
		return false
	end
	local be = npc:best_enemy()
	if not be then
		remove_target(npc_id,self.st)
		return false
	end
	local be_id = be:id()
	local target = self.st.target and level.object_by_id(self.st.target)
	if not (target and target:alive()) then
--		printf("evaluator_knife_attack[%s]:not target",npc:character_name())
		remove_target(npc_id,self.st)
	end
	local npc_pos = npc:position()
	if target then
--		printf("evaluator_knife_attack[%s]:target",npc:character_name())
		local target_pos = be:position()
		local dist = target_pos:distance_to(npc_pos)
		if targets[self.st.target] then
			if targets[self.st.target] ~= npc_id then
				printf("evaluator_knife_attack[%s]:target gette",npc:character_name())
				remove_target(npc_id,self.st)
			elseif self.st.target ~= be_id and dist > 3 or not npc:accessible(target_pos) then
				printf("evaluator_knife_attack[%s]:target not access",npc:character_name())
				remove_target(npc_id,self.st)
			else
				if self.st.type == kill_wounded and dist > 5 then
					remove_target(npc_id,self.st)
					self.st.delay = tg+15000
					return false
				elseif self.st.type == sneak_attack and target:see(npc) and dist > self.courage/20 then
					self.st.type = close_attack
					return true
				elseif self.st.type == close_attack and dist > self.courage/10 then
					remove_target(npc_id,self.st)
					self.st.delay = tg+15000
					return false
				elseif self.st.type == mutant_hunt and dist > 15 then
					remove_target(npc_id,self.st)
					self.st.delay = tg+12000
					return false
				elseif self.st.type == mutant_defend and dist > 12 or npc.health < 0.2 then -- or not (target:get_enemy() and target:get_enemy():id() == npc_id)
					remove_target(npc_id,self.st)
					self.st.delay = tg+12000
					return false
				end
				return true
			end
		else
			if dist > 12 then
				printf("evaluator_knife_attack[%s]:target dist > 12",npc:character_name())
				self.st.target = nil
			end
		end
	end
	if self.check_timer > tg then
		return target ~= nil
	end
	self.check_timer = tg+knife_sets.check_prd
	local be_pos = be:position()
	local dist = npc_pos:distance_to(be_pos)
	if targets[be_id] or (xr_wounded.is_wounded(be) and not self.attack_wounded) or dist > 10 or not npc:accessible(be_pos) then
--		printf("evaluator_knife_attack[%s]:not access %s %s %s %s",npc:character_name(),tostring(targets[be_id]),tostring((xr_wounded.is_wounded(be) and not self.attack_wounded)),tostring(dist > 15),tostring(not npc:accessible(be_pos)))
		return false
	end
	local be_see_me,me_see_be = be:see(npc),npc:see(be)
	if IsStalker(be) then
		if xr_wounded.is_wounded(be) then
			if self.attack_wounded and me_see_be and dist < 3.5 then
				self.st.target = be_id
				self.st.type = kill_wounded
				return true
			end
			return false
		end
		if me_see_be and not be_see_me and self.courage > 40 and npc:body_state() == move.crouch and dist < 5 and npc.health > 0.5 then
	--		printf("sneak_attack[%s]:return true",npc:character_name())
			self.st.target = be_id
			self.st.type = sneak_attack
			return true
		end
		if self.courage > 33+5*dist and me_see_be then
			local npc_wpn,be_wpn = npc:active_item(),be:active_item()
			if not (be_wpn and rx_utils.item_is_fa(be_wpn) and npc_wpn and npc_wpn:section() ~= "wpn_knife" and npc_wpn:get_ammo_in_magazine() ~= 0 and be_wpn:get_ammo_in_magazine() ~= 0) then
--				printf("close_attack[%s]:return true",npc:character_name())
				self.st.target = be_id
				self.st.type = close_attack
				self.st.timer = self.st.timer+6000
				return true
			end
		end
	else
		local bee = be:get_enemy()
--		printf("monster[%s]: %s  %s",npc:character_name(),tostring(not (be_see_me and be:get_enemy() and be:get_enemy():id() == npc_id)),tostring(npc.health > 0.8))
		if self.cmhunt and mutant_hunt_clsids[be:clsid()] and self.courage > 35+5*dist and not (be_see_me and bee and bee:id() == npc_id) and npc.health > 0.8 then
--			printf("mutant_hunt[%s]:return true",npc:character_name())
			self.st.target = be_id
			self.st.type = mutant_hunt
			self.st.timer = self.st.timer+6000
			return true
		elseif mutant_defend_clsids[be:clsid()] and dist < 6 and self.courage > 40+dist and (be_see_me and bee and bee:id() == npc_id) and npc.health > 0.2 then
--			printf("mutant_defend[%s]:return true",npc:character_name())
			self.st.target = be_id
			self.st.type = mutant_defend
			self.st.timer = self.st.timer+4000
			return true
		end
	end
	return false
end
function evaluator_knife_attack:death_callback(who)
	if self.object then
		remove_target(self.object:id(),self.st)
	end
end


class "evaluator_knife_defend" (property_evaluator)
function evaluator_knife_defend:__init(npc,name,storage) super (nil,name)
	self.st = storage
end

function evaluator_knife_defend:evaluate()
	return false
end


class "action_knife_attack" (action_base)
function action_knife_attack:__init(npc,action_name,storage) super (nil,action_name)
	self.st = storage
	self.rank = ranks.get_obj_rank_name(npc)
	self.comm = npc:character_community()
	self.rate = 1000/(knife_sets.ranks[self.rank].rate+knife_sets.communities[self.comm].rate_add)
end
function action_knife_attack:initialize()
	action_base.initialize(self)
	local npc = self.object
	printf("knife_attack[%s]:init",npc:character_name())
	self.st.timer = time_global()+30000
	self.start_time = time_global()
	self.fire_time = 0
	self.mental_time = 0
	if rx_wmgr then
		local wm = rx_wmgr.get_wm(npc)
		local knife = wm:get_best_weapon(1)
		wm:return_items(knife and knife:id() or 0)
		wm:disable(self.st.timer)
	end
	npc:set_desired_position()
	npc:set_desired_direction()
	npc:set_mental_state(anim.danger)
	npc:set_movement_type(move.run)
--	state_mgr.set_state(npc,"assault")
	state_mgr.set_state(npc,"idle")
	targets[self.st.target] = npc:id()
	if self.st.type == kill_wounded then
		xr_sound.set_sound_play(targets[self.st.target],"kill_wounded")
	end
	self.ddr = math.random() > 0.5
end

function action_knife_attack:execute()
	action_base.execute(self)
	local npc,tg = self.object,time_global()
	local npc_id = npc:id()
	if self.st.timer < tg then
		remove_target(npc_id,self.st)
		self.st.delay = tg+10000
		printf("knife_attack[%s]:timer < tg",npc:character_name())
		return
	end
	local target = level.object_by_id(self.st.target)
	local dist = npc:position():distance_to(target:position())
	local knife = npc:object("wpn_knife")
	local dir = target:position()
	dir:sub(npc:position())
	npc:set_sight(look.direction,dir)
	local acti = npc:active_item()
	acti = acti and acti:section() == "wpn_knife"
	if acti and (dist < knife_sets.fire_dist or self.st.type == mutant_defend and dist < knife_sets.fire_dist*1.5) then
--		printf("attack[%s]:set fire",npc:character_name())
		npc:set_sight(look.fire_point,rx_utils.safe_bone_pos(target,"bip01_neck"))
		if self.fire_time < tg then
			npc:set_item(object.fire1,knife,1,self.rate)
			self.fire_time = tg+self.rate
		end
		if self.st.type == kill_wounded then
--			npc:set_dest_level_vertex_id(npc:level_vertex_id())
			npc:set_movement_type(move.stand)
			npc:set_body_state(move.crouch)
		end
	else
		if not (self.st.type == kill_wounded or self.st.type == sneak_attack or IsMonster(target)) then
			xr_sound.set_sound_play(npc_id,"knife_attack")
		end
		if self.st.type ~= mutant_defend then
			npc:set_movement_type(move.run)
		end
		npc:set_item(object.aim1,knife)
	end
	if not acti then
		if self.start_time+4000 < tg then
			remove_target(npc_id,self.st)
			self.st.delay = tg+15000
			printf("knife_attack[%s]:timer < tg",npc:character_name())
			return
		end
		npc:set_mental_state(anim.danger)
	elseif self.st.type == sneak_attack then
		npc:set_body_state(move.crouch)
		npc:set_mental_state(anim.danger)
		if dist > 6 and target:see(npc) then
			printf("sneak_attack[%s]:abort",npc:character_name())
			remove_target(npc_id,self.st)
			return
		end
	elseif self.st.type == mutant_hunt then
		npc:set_body_state(move.standing)
		if self.mental_time < tg then
			if dist < 3 and self.mental ~= anim.danger then
				self.mental_time = tg+900
				self.mental = anim.danger
			elseif self.mental ~= anim.panic then
				self.mental_time = tg+1500
				self.mental = anim.panic
			end
			npc:set_mental_state(self.mental)
		end
--		printf("mutant_hunt[%s]:send",npc:character_name())
	elseif self.st.type == close_attack then
		npc:set_body_state(move.standing)
		npc:set_mental_state(anim.danger)
--		printf("close_attack[%s]:send",npc:character_name())
	elseif self.st.type == mutant_defend then
		npc:set_body_state(move.standing)
		npc:set_mental_state(anim.danger)
		if dist < 3.5 then
			npc:set_movement_type(move.run)
		else
			npc:set_movement_type(move.walk)
		end
--		printf("mutant_defend[%s]:send",npc:character_name())
	end
	local vertex = self.st.type == mutant_defend and get_dodge_vertex(npc,target,self.ddr) or target:level_vertex_id()
	utils.send_to_nearest_accessible_vertex(npc,vertex)
end

function action_knife_attack:finalize()
	local npc = self.object
	printf("knife_attack[%s]:fin",npc:character_name())
	if rx_wmgr then
		rx_wmgr.get_wm(npc):enable()
	end
	if not npc:best_enemy() then
		npc:set_item(object.idle,npc:object("wpn_knife"))
		state_mgr.set_state(npc,"guard")
	end
	npc:set_sight(look.direction,npc:direction())
	remove_target(npc:id(),self.st)
	self.mental = nil
	self.ddr = nil
	action_base.finalize(self)
end

class "action_knife_defend" (action_base)
function action_knife_defend:__init (npc,action_name,storage) super (nil,action_name)
	self.st = storage
end
function action_knife_defend:initialize()
	action_base.initialize(self)
	self.wm = db.storage[npc:id()].wm
	self.wm:set_weapon(npc:object("wpn_knife"))
	self.wm.disabled_temp = true
end
function action_knife_defend:execute()
	action_base.execute(self)
end
function action_knife_defend:finalize()
	action_base.finalize(self)
end

function get_dodge_vertex(s,o,d)
	local dir = o:position():sub(s:position())
	dir = vector_rotate_y(dir,d and 50 or 310)
	return s:vertex_in_direction(s:level_vertex_id(),dir,3)
end

function npc_update(npc)
	if knife_sets.enabled and not rx_ai.get_var(npc,"kn_spawn") then
		local knife = npc:object("wpn_knife")
		if not knife and math.random() < 0.7 then
			local money = npc:money()-300
			npc:give_money(-300)
			if money < 0 then
				npc:give_money(-money)
			end
			alife():create("wpn_knife",npc:position(),npc:level_vertex_id(),npc:game_vertex_id(),npc:id())
		end
		rx_ai.save_var(npc,"kn_spawn",true)
	end
end

evid_knife_attack=rx_ai.base_id+35
--evid_knife_defend=evid_knife_attack+1
actid_knife_attack=evid_knife_attack
--actid_knife_defend=actid_knife_attack+1

function add_to_binder(npc,ini,scheme,section,storage)
	if not knife_sets.inited then
		init()
	end
	local manager = npc:motivation_action_manager()
	if not (knife_sets.enabled and not knife_sets.forbiddens.factions[npc:character_community()] and knife_sets.ranks[ranks.get_obj_rank_name(npc)] and not knife_sets.forbiddens.npcs[npc:name()]) then
		manager:add_evaluator(evid_knife_attack,property_evaluator_const(false))
		return
	end
	manager:add_evaluator(evid_knife_attack,evaluator_knife_attack(npc,"evaluator_knife_attack",storage))
	local action = action_knife_attack(npc,"knife_attack",storage)
	action:add_precondition(world_property(stalker_ids.property_alive,true))
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
--	action:add_precondition(world_property(xr_evaluators_id.state_mgr+1,true))
	if rx_gl then
		action:add_precondition(world_property(rx_gl.evid_gl_fire,false))
	end
	if rx_bandage then
		action:add_precondition(world_property(rx_bandage.evid_bandage,false))
	end
	action:add_precondition(world_property(evid_knife_attack,true))
	action:add_effect(world_property(evid_knife_attack,false))
	manager:add_action(actid_knife_attack,action)
	for i,id in ipairs({stalker_ids.action_combat_planner,stalker_ids.action_danger_planner,xr_actions_id.stohe_meet_base+1}) do
		action = manager:action(id)
		action:add_precondition(world_property(evid_knife_attack,false))
	end
end

function set_scheme(npc,ini,scheme,section)
	local st = xr_logic.assign_storage_and_bind(npc,ini,scheme,section)
end

function disable_scheme(npc,scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end
