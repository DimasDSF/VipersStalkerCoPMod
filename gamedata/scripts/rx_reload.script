---- Rulix aka Bak --- 2.7.2009

function printf(s, ...)
--	rx_ai.printf("reload:"..s,...)
--	get_console():execute("flush")
end

class "evaluator_reload" (property_evaluator)
function evaluator_reload:__init(npc,name,storage) super (nil,name)
	self.st = storage
	self.delay = time_global()+math.random(6000,12000)
	if rx_wmgr and rx_wmgr.wm_modes.enabled_ext then
		self.st.wm = rx_wmgr.get_wm(npc)
	end
end
function evaluator_reload:evaluate()
	local npc = self.object
	if rx_utils.IsTrader(npc) then
		return false
	end
	local be  = npc:best_enemy()
	if be and (not xr_wounded.is_wounded(be) or npc:position():distance_to_sqr(be:position()) < 40) then
		self.st.do_id = nil
		self.st.timer = nil
		self.enemy = true
		return false
	end
	if self.enemy then
		self.enemy = nil
		self.delay = time_global()+math.random(4000,15000)
--		printf("eva[%s]:set delay",npc:character_name())
	end
	local state = state_mgr.get_state(npc)
	local anim = state_lib.states[state] and state_lib.states[state].animation
	if (anim ~= nil and anim ~= "idle") or xr_wounded.is_wounded(npc) then
		self.delay = time_global()+math.random(3000,6000)
		return false
	end
	if self.delay > time_global() then
		return false
	end
	if self.st.wm then
		if self.st.wpn then
			return true
		end
		local cnt = self.st.wm:update_weapon_list()
		if cnt > 1 then
			local types = {}
			for k,v in pairs(self.st.wm.weapons) do
				if #v > 0 then
					types[k] = true
				end
			end
			for k,t in ipairs(self.st.wm.modes.types) do
				if types[t.t] then
					for q,w in ipairs(self.st.wm.weapons[t.t]) do
						local wpn = level.object_by_id(w.id)
--						printf("[%s]: check[%s]:%s",npc:character_name(),wpn:section(),wpn:get_ammo_in_magazine())
						if wpn:get_ammo_in_magazine() < get_mag_size(wpn:section()) then
							self.st.wpn = w.id
							printf("[%s]: reload [%s] change",npc:character_name(),wpn:section())
							return true
						end
					end
				end
			end
		end
	else
		self.st.wpn = nil
		local cwpn = npc:best_weapon()
		if cwpn then
			local inmag = cwpn:get_ammo_in_magazine()
			if rx_utils.item_is_fa(cwpn) and inmag < get_mag_size(cwpn:section()) and inmag < cwpn:get_ammo_total() then
				return true
			end
		end
	end
	self.st.do_id = nil
	self.delay = time_global()+(rx_wmgr and rx_wmgr.wm_modes.reload_prd or 1200)
	return false
end

class "action_reload" (action_base)
function action_reload:__init (npc,action_name,storage) super (nil,action_name)
	self.st = storage
end
function action_reload:initialize()
	action_base.initialize(self)
	local npc = self.object
	if npc:body_state() ~= move.crouch then
--		npc:clear_animations()
	end
	local state = state_mgr.get_state(npc)
	if state_lib.states[state].weapon ~= "unstrapped" then
		printf("init[%s]set patrol",npc:character_name())
		state_mgr.set_state(npc,"patrol")
	end
	local be = npc:best_enemy()
	if be then
		npc:set_desired_position()
		npc:set_desired_direction()
		npc:set_dest_level_vertex_id(be:level_vertex_id())
	elseif self.object:motivation_action_manager():evaluator(stalker_ids.property_enemy):evaluate() then
		printf("init[%s]set idle",npc:character_name())
		state_mgr.set_state(npc,"idle")
		npc:set_dest_level_vertex_id(npc:level_vertex_id())
	end
	if self.st.wm then
		self.st.wm:disable(time_global()+500000)
	end
end
function action_reload:execute()
	action_base.execute(self)
	local npc,tg = self.object,time_global()
	local wpn
	if self.st.wm then
		wpn = level.object_by_id(self.st.wpn) --self.st.wm:get_weapon()
	else
		wpn = npc:best_weapon()
	end
	if wpn and rx_utils.item_is_fa(wpn) then
		if self.st.wm then
			self.st.wm:return_items(self.st.wpn)
		end
		local id = wpn:id()
		local magsize = get_mag_size(wpn:section())
		local elapsed = wpn:get_ammo_in_magazine()
		if elapsed >= magsize then
			printf("act[%s].elapsed >= magsize",npc:character_name())
			self.st.wpn = nil
			return
		elseif elapsed > 0 and not self.st.do_id or self.st.do_id ~= id then
			printf("act[%s]unload",npc:character_name())
			wpn:unload_magazine()
		end
		if self.st.do_id and self.st.do_id == id then
			if (self.st.timer or 0) < tg then
				printf("act[%s]set on",npc:character_name())
				wpn:set_ammo_elapsed(magsize)
				if rx_utils.weapon_types_clslist.shotgun[wpn:clsid()] then
					npc:set_item(object.idle,nil)
				else
					npc:set_item(object.idle,wpn)
				end
				self.st.do_id = nil
				self.st.timer = nil
				self.st.wpn = nil
				return
			end
		else
			self.st.do_id = id
			self.st.timer = tg+4500
			if rx_utils.weapon_types_clslist.shotgun[wpn:clsid()] then
				self.st.timer = self.st.timer+6000
				printf("act[%s]shotgun = true",npc:character_name())
			end
			if npc:body_state() == move.crouch then
				self.st.timer = self.st.timer+3000
			end
		end
		if wpn:parent() and wpn:parent():id() == npc:id() then
			npc:set_item(object.aim1,wpn)
		end
	else
		printf("act[%s]not wpn!",npc:character_name())
		self.st.do_id = nil
		self.st.timer = nil
		self.st.wpn = nil
	end
end
function action_reload:finalize()
    action_base.finalize(self)
	local npc = self.object
	self.st.wpn = nil
	if self.st.wm then
		self.st.wm:enable()
		self.st.wm.period = time_global()+rx_wmgr.wm_modes.combat_prd
	end
	npc:set_item(object.idle,npc:active_item())
	state_mgr.set_state(self.object,"idle")
	printf("act[%s]fin",npc:character_name())
end

evid_reload = rx_ai.base_id+5
actid_reload = evid_reload

function add_to_binder(npc,ini,scheme,section,storage)
	local manager = npc:motivation_action_manager()
	if npc:character_community() == "zombied" or rx_utils.IsTrader(npc) then
		manager:add_evaluator(evid_reload,property_evaluator_const(false))
		return
	else
		manager:add_evaluator(evid_reload,evaluator_reload(npc,"eva_reload",storage))
	end
	local action = action_reload(npc,"act_reload",storage)
	action:add_precondition(world_property(stalker_ids.property_alive,true))
	action:add_precondition(world_property(stalker_ids.property_danger,false))
	action:add_precondition(world_property(xr_evaluators_id.sidor_wounded_base,false))
	action:add_precondition(world_property(xr_evaluators_id.wounded_exist,false))
	if rx_bandage then
		action:add_precondition(world_property(rx_bandage.evid_bandage,false))
	end
	if rx_gl then
		action:add_precondition(world_property(rx_gl.evid_gl_reload,false))
	end
	if xrs_grenade and xrs_grenade.evid_aaa_grenade then
		action:add_precondition(world_property(xrs_grenade.evid_aaa_grenade,false))
	end
	if xrs_medic and xrs_medic.evid_self_medic then
		action:add_precondition(world_property(xrs_medic.evid_self_medic,false))
	end
	if watcher_act then
--		action:add_precondition(world_property(watcher_act.evid_see_stuff,false))
		action:add_precondition(world_property(watcher_act.evid_near_stuff,false))
	end
	if blowout_scheme and blowout_scheme.evid_outside then
		action:add_precondition(world_property(blowout_scheme.evid_outside,false))
	end
	action:add_precondition(world_property(evid_reload,true))
	action:add_effect(world_property(evid_reload,false))
	manager:add_action(actid_reload,action)
	for n,id in ipairs({xr_actions_id.alife,xr_actions_id.stohe_meet_base+1,xr_actions_id.stohe_kamp_base+3,xr_actions_id.stohe_kamp_base+5,xr_actions_id.corpse_exist,stalker_ids.action_gather_items,xr_actions_id.state_mgr+1}) do
		action = manager:action(id)
		action:add_precondition(world_property(evid_reload,false))
	end
end

function set_scheme(npc,ini,scheme,section)
	local st = xr_logic.assign_storage_and_bind(npc,ini,scheme,section)
end

function disable_scheme(npc, scheme)
	local st = db.storage[npc:id()][scheme]
	if st then
		st.enabled = false
	end
end

function get_mag_size(section)
	return (rx_wmgr and rx_wmgr.read_wpn_params(section).mag) or rx_utils.read_from_ini(nil,section,"ammo_mag_size",1)
end
